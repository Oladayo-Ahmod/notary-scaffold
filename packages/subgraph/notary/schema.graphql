type DocumentNotarized @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  documentHash: String! # string
  timestamp: BigInt! # uint256
  imageURI: String! # string
  description: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DocumentRetrieved @entity(immutable: true) {
  id: Bytes!
  requester: Bytes! # address
  documentHash: String! # string
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DocumentRevoked @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  documentHash: String! # string
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Query {
  documentNotarizeds(first: Int, skip: Int, where: DocumentFilter, orderBy: String, orderDirection: String): [DocumentNotarized!]!
  documentByHash(hash: String!): Document
  documentsByOwner(owner: Bytes!, first: Int, skip: Int): [Document!]!
}
input DocumentFilter {
  owner: Bytes
  revoked: Boolean
  timestamp_gt: BigInt
  timestamp_lt: BigInt
}